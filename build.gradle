apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'docker'


buildscript {
	ext {
		springBootVersion = '1.3.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

group = 'toregard'
//https://spring.io/guides/gs/spring-boot-docker/
//https://github.com/Transmode/gradle-docker/blob/master/src/main/groovy/se/transmode/gradle/plugins/docker/DockerTask.groovy

task buildDocker(type: Docker, dependsOn: build) {
	push = true

	applicationName = jar.baseName
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}
}


jar {
	baseName = 'cv'
	version = '1.0'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
//	compile('org.springframework.boot:spring-boot-devtools')
//	compile('org.springframework.boot:spring-boot-starter-freemarker')
//	compile('org.springframework.boot:spring-boot-starter-jersey')
//	compile('org.springframework.boot:spring-boot-starter-redis')
	compile('org.springframework.boot:spring-boot-starter-web')
//	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("junit:junit")
}


eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.9'
}
